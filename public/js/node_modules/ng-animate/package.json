{
  "name": "ng-animate",
  "version": "0.3.4",
  "description": "A library of cool, reusable and flexible animations for Angular",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jiayihu/ng-animate.git"
  },
  "keywords": [
    "angular",
    "animations"
  ],
  "author": {
    "name": "Jiayi Hu",
    "email": "jiayi.ghu@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/jiayihu/ng-animate/issues"
  },
  "homepage": "https://github.com/jiayihu/ng-animate#readme",
  "peerDependencies": {
    "@angular/animations": ">=4.2.0",
    "@angular/core": ">=4.2.0"
  },
  "main": "bundles/ng-animate.umd.js",
  "module": "fesm5/ng-animate.js",
  "es2015": "fesm2015/ng-animate.js",
  "esm5": "esm5/ng-animate.js",
  "esm2015": "esm2015/ng-animate.js",
  "fesm5": "fesm5/ng-animate.js",
  "fesm2015": "fesm2015/ng-animate.js",
  "typings": "ng-animate.d.ts",
  "metadata": "ng-animate.metadata.json",
  "sideEffects": false,
  "dependencies": {
    "tslib": "^1.9.0"
  },
  "readme": "# ðŸŒ™ ng-animate\n\n[![npm](https://img.shields.io/npm/v/ng-animate.svg)](https://www.npmjs.com/package/ng-animate)\n\n`ng-animate` is a collection of cool, reusable and flexible animations for Angular. It implements all the animations in [animate.css](https://daneden.github.io/animate.css/), but with the power and flexibility of [Angular animations](https://angular.io/guide/animations) instead of CSS.\n\n> **Note**: the library requires Angular 4.2+, which introduced [different new animation APIs](http://angularjs.blogspot.it/2017/06/angular-42-now-available.html) needed by `ng-animate`.\n\n## Demo\n\nThe demo of the animations is available at [https://jiayihu.github.io/ng-animate/](https://jiayihu.github.io/ng-animate/).\n\n## Usage\n\n```\nnpm install ng-animate --save\n```\n\n## Example\n\nImport the animation from the package and pass it to your Angular component using [useAnimation](https://angular.io/api/animations/useAnimation):\n\n```javascript\n// my-component.component.ts\nimport { trigger, transition, useAnimation } from '@angular/animations';\nimport { bounce } from 'ng-animate';\n\n@Component({\n  selector: 'my-component',\n  templateUrl: 'my-component.component.html',\n  animations: [\n    trigger('bounce', [transition('* => *', useAnimation(bounce))])\n  ],\n})\nexport class MyComponent {\n  bounce: any;\n}\n```\n\n```html\n<!-- my-component.component.html -->\n<div [@bounce]=\"bounce\"></div>\n```\n\n**Note**: Make sure to have included `BrowserAnimationsModule` in your `AppModule` and the [web-animation.js](https://github.com/web-animations/web-animations-js) polyfill.\n\nIt's also possible to import only a subset of the animations:\n\n```javascript\nimport { bounce } from 'ng-animate/lib/bouncing';\n```\n\n### Animation params\n\n**All the animations** provided by `ng-animate` support at least two **optional** params `timing` and `delay` to specify the animation duration and delay. Default value for `timing` is usually `1`s and `0`s for `delay`.  \nYou can pass the `params` object using the Javascript API or within the component template:\n\n```javascript\n@Component({\n  selector: 'my-component',\n  templateUrl: 'my-component.component.html',\n  animations: [\n    trigger('bounce', [transition('* => *', useAnimation(bounce, {\n      // Set the duration to 5seconds and delay to 2seconds\n      params: { timing: 5, delay: 2 }\n    }))])\n  ],\n})\nexport class MyComponent {}\n```\n\nUsing a template can achieve the same result, but you'll have access to the component context:\n\n```html\n<div [@bounce]=\"{ value: bounce, params: { timing: myTiming || 5, delay: myDelay || 2 } }\"></div>\n```\n\n## Animations\n\nAll the animations are organized by their group. Many of them have additional params other than `timing/delay`: refer to [Advanced Usage](#advanced-params) for more details. Nevertheless you can probably ignore them if you're happy with how they are by default.\n\n### Attention seekers\n\n- `bounce`\n- `flash`\n- `pulse`\n- `rubberBand`\n- `shake`\n- `swing`\n- `tada`\n- `wobble`\n- `jello`\n\n### Bouncing\n\n- `bounceIn`\n- `bouceOut`. Additional param: `scale`\n\nThe following bouncing animations have additional params `a, b, c, d` for `translate`\n\n- `bounceInDown`\n- `bounceInLeft`\n- `bounceInRight`\n- `bounceInUp`\n- `bounceOutDown`\n- `bounceOutLeft`\n- `bounceOutRight`\n- `bounceOutUp`\n\n### Fading\n\nAll fading animations have additional params `fromOpacity, toOpacity` for `opacity` transition and `a, b` for `translate`.\n\n- `fadeIn`\n- `fadeInDown`\n- `fadeInLeft`\n- `fadeInRight`\n- `fadeInUp`\n- `fadeOut`\n- `fadeOutDown`\n- `fadeOutLeft`\n- `fadeOutRight`\n- `fadeOutUp`\n\n### Sliding\n\nSliding animations are basically fading animations without a change of `opacity`. They can also receive the same params.\n\n- `slideInDown`\n- `slideInLeft`\n- `slideInRight`\n- `slideInUp`\n- `slideOutDown`\n- `slideOutLeft`\n- `slideOutRight`\n- `slideOutUp`\n\n### Flippers\n\n- `flip`\n- `flipInX`\n- `flipInY`\n- `flipOutX`\n- `flipOutY`\n\n### LightSpeed\n\n- `lightSpeedIn`\n- `lightSpeedOut`\n\n### Rotating\n\nAll rotating animations have additional params `fromOpacity, toOpacity` for `opacity` transition, `origin` for `transform-origin` and `degrees` for `rotate3d`.\n\n- `rotateIn`\n- `rotateInDownLeft`\n- `rotateInDownRight`\n- `rotateInUpLeft`\n- `rotateInUpRight`\n- `rotateOut`\n- `rotateOutDownLeft`\n- `rotateOutDownRight`\n- `rotateOutUpLeft`\n- `rotateOutUpRight`\n\n### Specials\n\n- `jackInTheBox`\n- `hinge`\n- `rollIn`\n- `rollOut`\n\n### Zooming\n\n- `zoomIn`\n- `zoomOut`\n\nThe following zooming animations have additional params `a, b` for `translate`\n\n- `zoomInDown`\n- `zoomInLeft`\n- `zoomInRight`\n- `zoomInUp`\n- `zoomOutDown`\n- `zoomOutLeft`\n- `zoomOutRight`\n- `zoomOutUp`\n\n## Advanced params\n\nMany of the animations support also other params like `scale`, `fromOpacity`, `toOpacity` and much more, allowing extremely flexible usage and customisation if you're not happy with default values. \n\nSingle letters like `a, b, c, d` are used for the steps of some animations: `a` is the starting value, `d` is the ending.  \nThe animated property they refer to depends on the animation and the direction: usually `translate` on axis Y from `-Down/-Up`, axis X for `-Left/-Right`.\n\n```javascript\nuseAnimation(bounceInDown, {\n  params: {\n    timing: 5,\n\n    // Specify granular values for `translate` on axis Y during 'bounceInDown' \n    a: '-3000px',\n    b: '25px',\n    c: '-10px',\n    d: '5px',\n  }\n})\n```\n",
  "readmeFilename": "README.md",
  "_id": "ng-animate@0.3.4",
  "dist": {
    "shasum": "1b9db207f7bc5acd669f9d0adba8f5b665074598"
  },
  "_from": "ng-animate@",
  "_resolved": "https://registry.npmjs.org/ng-animate/-/ng-animate-0.3.4.tgz"
}
